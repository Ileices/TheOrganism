"""
Module: Universal State Management
Purpose: Core implementation of the AE=C=1 principle through a unified state object

UAF Compliance:
- AE=C=1: Single source of truth for all system state
- RBY Cycle: Stores trifecta weights and cycle tracking
- RPS: Maintains excretion history for recursive prediction
- Photonic Memory: Manages DNA memory as RBY triplet codons
- Hardware Integration: Tracks GPU/CPU availability and performance

Dependencies:
- typing: Type annotations for enterprise-grade code quality
- dataclasses: Structured state management
- enum: Type-safe phase definitions
- time: System time tracking
- threading: Thread-safe state access

Performance Characteristics:
- O(1) state access and updates
- O(n) validation where n is number of DNA codons
- Thread-safe operations with minimal locking overhead
- Memory-efficient storage using dataclasses

Author: TheOrganism Enterprise Team
Created: 2025-06-08
Last Modified: 2025-06-08
UAF Version: 1.0.0 (Phase 1 Implementation)
"""

from typing import Dict, Any, Optional, List, Tuple
from dataclasses import dataclass, field
from decimal import Decimal, getcontext
from enum import Enum
import threading
import time

# Set high precision for UAF calculations
getcontext().prec = 50


@dataclass
class TrifectaWeights:
    """
    Trifecta weight structure for Red-Blue-Yellow processing.
    
    Represents the relative emphasis of each RBY phase in the current cycle.
    Weights should sum to approximately 1.0 for balanced processing.
    """
    red: float = 0.333333
    blue: float = 0.333333
    yellow: float = 0.333334
    
    def normalize(self) -> 'TrifectaWeights':
        """Normalize weights to sum to 1.0."""
        total = self.red + self.blue + self.yellow
        if total > 0:
            return TrifectaWeights(
                red=self.red / total,
                blue=self.blue / total, 
                yellow=self.yellow / total
            )
        else:
            return TrifectaWeights()  # Default balanced weights
    
    def get_imbalance(self) -> float:
        """Get the imbalance measure (range between max and min weights)."""
        weights = [self.red, self.blue, self.yellow]
        return max(weights) - min(weights)


class UAFPhase(Enum):
    """UAF processing phases in the Trifecta RBY cycle."""
    PERCEPTION = "RED"
    COGNITION = "BLUE" 
    EXECUTION = "YELLOW"

@dataclass
class UniversalState:
    """
    The single source of truth for the entire system (AE=C=1).
    
    This class implements the core UAF principle that Agent=Environment=Consciousness=1,
    meaning all system state is unified in a single, recursively updated object.
    
    UAF Integration:
        - State Usage: Central repository for all system state
        - RBY Phase: Tracks current phase and trifecta weights
        - RPS Compliance: Stores excretions for recursive prediction
        - Memory Impact: Manages photonic memory as RBY triplet codons
    """
    
    # Core UAF Components (AE=C=1 implementation)
    trifecta_weights: Dict[UAFPhase, Decimal] = field(
        default_factory=lambda: {
            UAFPhase.PERCEPTION: Decimal('0.3333333333333333333333333333333333'),
            UAFPhase.COGNITION: Decimal('0.3333333333333333333333333333333333'),
            UAFPhase.EXECUTION: Decimal('0.3333333333333333333333333333333334')
        }
    )
    
    # Photonic Memory - Neural DNA triplet codons (RBY format)
    dna_memory: List[Tuple[Decimal, Decimal, Decimal]] = field(default_factory=list)
    
    # Excretions for RPS (Recursive Predictive Structuring)
    # No randomness - all variation from recursive feedback on these outputs
    excretions: List[Any] = field(default_factory=list)
    
    # System time tracking
    time: float = field(default_factory=time.time)
    
    # System State (Agent and Environment unified)
    internal_organism_state: Dict[str, Any] = field(default_factory=dict)
    environment_state: Dict[str, Any] = field(default_factory=dict)
    
    # Performance Metrics and Hardware State
    gpu_available: bool = False
    current_cycle_id: int = 0
    last_rby_duration: Optional[float] = None
    current_phase: UAFPhase = UAFPhase.PERCEPTION
    
    # Thread safety
    _lock: threading.RLock = field(default_factory=threading.RLock, init=False)
    
    def validate_uaf_compliance(self) -> bool:
        """
        Validate that state adheres to UAF principles.
        
        Returns:
            True if state is UAF-compliant, False otherwise
            
        UAF Integration:
            - State Usage: Validates unified state integrity
            - RBY Phase: Ensures trifecta weights maintain homeostasis
            - RPS Compliance: Verifies excretion history structure
            - Memory Impact: Validates DNA memory triplet structure
        """
        with self._lock:
            try:
                # Validate trifecta weights sum to 1.0 (homeostasis principle)
                total_weight = sum(self.trifecta_weights.values())
                if not (Decimal('0.99') <= total_weight <= Decimal('1.01')):
                    return False
                
                # Validate DNA memory structure (must be RBY triplets)
                for codon in self.dna_memory:
                    if not isinstance(codon, tuple) or len(codon) != 3:
                        return False
                    if not all(isinstance(val, Decimal) for val in codon):
                        return False
                
                # Validate current phase is valid
                if not isinstance(self.current_phase, UAFPhase):
                    return False
                
                # Validate cycle tracking
                if self.current_cycle_id < 0:
                    return False
                  return True
                
            except Exception:
                return False
    
    def get_trifecta_weights(self) -> TrifectaWeights:
        """Get current trifecta weights as TrifectaWeights object."""
        with self._lock:
            return TrifectaWeights(
                red=float(self.trifecta_weights[UAFPhase.PERCEPTION]),
                blue=float(self.trifecta_weights[UAFPhase.COGNITION]),
                yellow=float(self.trifecta_weights[UAFPhase.EXECUTION])
            )
    
    def update_trifecta_weights(self, weights: TrifectaWeights) -> None:
        """Update trifecta weights from TrifectaWeights object."""
        with self._lock:
            normalized = weights.normalize()
            self.trifecta_weights[UAFPhase.PERCEPTION] = Decimal(str(normalized.red))
            self.trifecta_weights[UAFPhase.COGNITION] = Decimal(str(normalized.blue))
            self.trifecta_weights[UAFPhase.EXECUTION] = Decimal(str(normalized.yellow))
    
    def increment_cycle(self) -> None:
        """Increment the current cycle ID."""
        with self._lock:
            self.current_cycle_id += 1
    
    def add_excretion(self, excretion_data: Any) -> None:
        """
        Add excretion data for RPS (Recursive Predictive Structuring).
        
        Args:
            excretion_data: Any data to be stored as excretion for future RPS use
            
        UAF Integration:
            - State Usage: Updates excretion history in unified state
            - RBY Phase: Stores results from RBY cycle execution
            - RPS Compliance: Core mechanism for non-random variation generation
            - Memory Impact: Grows excretion history for recursive feedback
        """
        with self._lock:
            excretion_entry = {
                'data': excretion_data,
                'cycle_id': self.current_cycle_id,
                'timestamp': time.time(),
                'phase': self.current_phase.value
            }
            self.excretions.append(excretion_entry)
            
            # Prevent unbounded growth - keep last 10000 excretions
            if len(self.excretions) > 10000:
                self.excretions = self.excretions[-10000:]
    
    def advance_cycle(self) -> UAFPhase:
        """
        Advance to next phase in the RBY cycle.
        
        Returns:
            The new current phase after advancement
            
        UAF Integration:
            - State Usage: Updates cycle state in unified state
            - RBY Phase: Core RBY cycle progression mechanism
            - RPS Compliance: Deterministic phase advancement
            - Memory Impact: No direct memory impact
        """
        with self._lock:
            # Advance through R -> B -> Y -> R cycle
            phase_order = [UAFPhase.PERCEPTION, UAFPhase.COGNITION, UAFPhase.EXECUTION]
            current_index = phase_order.index(self.current_phase)
            next_index = (current_index + 1) % len(phase_order)
            
            self.current_phase = phase_order[next_index]
            
            # Increment cycle ID when we complete a full R->B->Y cycle
            if self.current_phase == UAFPhase.PERCEPTION:
                self.current_cycle_id += 1
            
            return self.current_phase
    
    def get_state_snapshot(self) -> Dict[str, Any]:
        """
        Get a thread-safe snapshot of current state for monitoring/logging.
        
        Returns:
            Dictionary containing key state information
            
        UAF Integration:
            - State Usage: Provides read-only access to unified state
            - RBY Phase: Includes current phase and cycle information
            - RPS Compliance: Includes excretion count for monitoring
            - Memory Impact: Includes DNA memory statistics
        """
        with self._lock:
            return {
                'current_phase': self.current_phase.value,
                'current_cycle_id': self.current_cycle_id,
                'trifecta_weights': {phase.value: float(weight) for phase, weight in self.trifecta_weights.items()},
                'dna_memory_count': len(self.dna_memory),
                'excretion_count': len(self.excretions),
                'gpu_available': self.gpu_available,
                'last_rby_duration': self.last_rby_duration,
                'system_time': self.time,
                'uaf_compliant': self.validate_uaf_compliance()
            }
    
    def backup_state(self) -> Dict[str, Any]:
        """
        Create a complete backup of the universal state.
        
        Returns:
            Serializable dictionary containing complete state
            
        UAF Integration:
            - State Usage: Preserves unified state for recovery
            - RBY Phase: Backs up all trifecta and cycle data
            - RPS Compliance: Preserves excretion history
            - Memory Impact: Serializes DNA memory for persistence
        """
        with self._lock:
            return {
                'trifecta_weights': {phase.value: str(weight) for phase, weight in self.trifecta_weights.items()},
                'dna_memory': [(str(r), str(g), str(b)) for r, g, b in self.dna_memory],
                'excretions': self.excretions.copy(),
                'time': self.time,
                'internal_organism_state': self.internal_organism_state.copy(),
                'environment_state': self.environment_state.copy(),
                'gpu_available': self.gpu_available,
                'current_cycle_id': self.current_cycle_id,
                'last_rby_duration': self.last_rby_duration,
                'current_phase': self.current_phase.value
            }
    
    def restore_state(self, backup_data: Dict[str, Any]) -> bool:
        """
        Restore state from backup data.
        
        Args:
            backup_data: Dictionary containing backed up state
            
        Returns:
            True if restore was successful, False otherwise
            
        UAF Integration:
            - State Usage: Restores unified state from backup
            - RBY Phase: Restores trifecta weights and cycle state
            - RPS Compliance: Restores excretion history
            - Memory Impact: Restores DNA memory from serialized data
        """
        with self._lock:
            try:
                # Restore trifecta weights
                for phase_str, weight_str in backup_data.get('trifecta_weights', {}).items():
                    phase = UAFPhase(phase_str)
                    self.trifecta_weights[phase] = Decimal(weight_str)
                
                # Restore DNA memory
                self.dna_memory = [
                    (Decimal(r), Decimal(g), Decimal(b)) 
                    for r, g, b in backup_data.get('dna_memory', [])
                ]
                
                # Restore other state
                self.excretions = backup_data.get('excretions', [])
                self.time = backup_data.get('time', time.time())
                self.internal_organism_state = backup_data.get('internal_organism_state', {})
                self.environment_state = backup_data.get('environment_state', {})
                self.gpu_available = backup_data.get('gpu_available', False)
                self.current_cycle_id = backup_data.get('current_cycle_id', 0)
                self.last_rby_duration = backup_data.get('last_rby_duration')
                self.current_phase = UAFPhase(backup_data.get('current_phase', 'RED'))
                
                # Validate restored state
                return self.validate_uaf_compliance()
                
            except Exception:
                return False


# Global universal state instance (Singleton pattern for AE=C=1)
_universal_state_instance: Optional[UniversalState] = None
_state_lock = threading.Lock()

def get_universal_state() -> UniversalState:
    """
    Get the global universal state instance (Singleton pattern).
    
    Returns:
        The global UniversalState instance
        
    UAF Integration:
        - State Usage: Provides access to the single source of truth
        - RBY Phase: Returns the unified state containing all RBY data
        - RPS Compliance: Returns state containing excretion history
        - Memory Impact: Returns state containing DNA memory
    """
    global _universal_state_instance
    
    with _state_lock:
        if _universal_state_instance is None:
            _universal_state_instance = UniversalState()
        return _universal_state_instance

def initialize_universal_state(gpu_available: bool = False, force_reset: bool = False) -> UniversalState:
    """
    Initialize the global universal state with hardware configuration.
    
    Args:
        gpu_available: Whether GPU acceleration is available
        force_reset: Whether to force reset existing instance
        
    Returns:
        The initialized UniversalState instance
        
    UAF Integration:
        - State Usage: Initializes the unified state for system startup
        - RBY Phase: Sets up initial trifecta weights
        - RPS Compliance: Initializes empty excretion history
        - Memory Impact: Initializes empty DNA memory
    """
    global _universal_state_instance
    
    with _state_lock:
        if _universal_state_instance is None or force_reset:
            _universal_state_instance = UniversalState()
            _universal_state_instance.gpu_available = gpu_available
            _universal_state_instance.time = time.time()
            
            # Verify UAF compliance
            if not _universal_state_instance.validate_uaf_compliance():
                raise RuntimeError("Failed to initialize UAF-compliant universal state")
        else:
            # Just update hardware info if instance already exists
            _universal_state_instance.gpu_available = gpu_available
        
        return _universal_state_instance


# Export main classes and functions
__all__ = ['UniversalState', 'UAFPhase', 'TrifectaWeights', 'get_universal_state', 'initialize_universal_state']
